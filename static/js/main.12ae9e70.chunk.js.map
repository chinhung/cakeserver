{"version":3,"sources":["component/Layout.js","component/sidebar/GitHub.js","component/sidebar/NewCommit.js","component/sidebar/CakeServerLogo.js","component/sidebar/Commits.js","component/content/Operations.js","component/content/Message.js","component/content/Note.js","App.js","util/uuid.js","data/LocalStorageDataSource.js","index.js","data/newCommit.js"],"names":["sidebarWidth","SidebarContainer","props","className","style","zIndex","width","children","ContentContainer","marginLeft","GitHub","href","target","rel","NewCommit","onClick","CakeServerLogo","color","Commits","commits","onSelect","map","commit","message","note","id","copyCommitMessageName","copyCommitMessageBtnId","copyCommitMessageBtnSelector","copyCommitMessageTargetId","copyCommitMessageTargetSelector","Operations","operations","useEffect","clipboard","ClipboardJS","on","e","console","info","action","text","trigger","clearSelection","error","operation","i","name","operate","createOperations","isNewCommit","saveCommit","copyCommitMessage","deleteCommit","redoCommit","Message","onChange","type","value","evt","Note","rows","cols","App","inject","newCommit","loadCommits","useState","setCommits","currentCommit","setCurrentCommit","loadData","then","operationFunctions","toSaved","toRedoed","filter","log","toDeleted","selected","uuidv4","getData","JSON","parse","localStorage","getItem","saveData","setItem","stringify","dataSource","Promise","resolve","reject","filtered","length","commitMessage","toChecked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12ae9e70.chunk.js","sourcesContent":["const sidebarWidth = '320px';\n\nfunction SidebarContainer(props) {\n    return (\n        <nav className=\"w3-sidebar w3-bar-block w3-collapse w3-white w3-animate-left w3-card\" style={{ zIndex: 3, width: sidebarWidth }}>\n            { props.children }\n        </nav>\n    );\n}\n\nfunction ContentContainer(props) {\n    return (\n        <div className=\"w3-main\" style={{ marginLeft: sidebarWidth }}>\n            <div className=\"w3-container\">\n            <br></br>\n                { props.children }\n            </div>\n        </div>\n    );\n}\n\nexport { SidebarContainer, ContentContainer };","function GitHub() {\n    return (\n        <a href=\"https://github.com/chinhung/cakeserver\" target=\"_blank\" rel=\"noreferrer\" className=\"w3-bar-item w3-button\"><i className=\"fa fa-github w3-margin-right\"></i>GitHub</a>\n    );\n}\n\nexport default GitHub;","function NewCommit({ onClick }) {\n    return (\n        <div className=\"e2e-new-commit w3-bar-item w3-button w3-dark-grey w3-button w3-hover-black w3-left-align\" onClick={onClick}>New Commit<i className=\"w3-padding fa fa-pencil\"></i></div>\n    );\n}\n\nexport default NewCommit;","function CakeServerLogo() {\n    return (\n        <div className=\"w3-bar-item w3-button w3-border-bottom w3-large\">\n            <h3>Cake Server</h3>\n            <h5 style={{ color: 'grey' }}>Splits your task into peices of cake!</h5>\n        </div>       \n    );\n}\n\nexport default CakeServerLogo;","function Commits({ commits, onSelect }) {\n    return (\n        <>\n            <div className=\"w3-bar-item w3-button\"><i className=\"fa fa-inbox w3-margin-right\"></i>Commits<i className=\"fa fa-caret-down w3-margin-left\"></i></div>\n            <div className=\"w3-animate-left\">\n\n                {commits.map(commit => (\n                    <div key={commit.id} className=\"w3-bar-item w3-button w3-border-bottom test w3-hover-light-grey\" onClick={() => onSelect({ ...commit })}>\n                        <div className=\"w3-container\">\n                            <span className=\"e2e-commit-message w3-opacity w3-large\">{commit.message}</span>\n                            <p className=\"e2e-commit-note\">{commit.note}</p>\n                        </div>\n                    </div>\n                ))}\n            \n            </div>\n        </>\n    );\n}\n\nexport default Commits;","import ClipboardJS from 'clipboard';\nimport { useEffect } from 'react';\n\nconst copyCommitMessageName = 'Copy Commit Message';\n\nconst copyCommitMessageBtnId = 'copyCommitMessageBtn';\nconst copyCommitMessageBtnSelector = `#${copyCommitMessageBtnId}`;\n\nconst copyCommitMessageTargetId = 'commitMessageText';\nconst copyCommitMessageTargetSelector = `#${copyCommitMessageTargetId}`;\n\nfunction Operations({ operations }) {\n\n    useEffect(() => {\n        const clipboard = new ClipboardJS(copyCommitMessageBtnSelector);\n\n        clipboard.on('success', function(e) {\n            console.info('Action:', e.action);\n            console.info('Text:', e.text);\n            console.info('Trigger:', e.trigger);\n        \n            e.clearSelection();\n        });\n        \n        clipboard.on('error', function(e) {\n            console.error('Action:', e.action);\n            console.error('Trigger:', e.trigger);\n        });\n        \n    }, []);\n\n    return (\n        operations.map((operation, i) => { \n            if (operation.name === copyCommitMessageName) {\n                return <button id={copyCommitMessageBtnId} data-clipboard-target={copyCommitMessageTargetSelector} key={i} className={operation.className} onClick={operation.operate}>{operation.name}</button>;\n            }\n\n            return <button key={i} className={operation.className} onClick={operation.operate}>{operation.name}</button>;\n        })\n    );\n}\n\nconst createOperations = (isNewCommit) => ({ saveCommit, copyCommitMessage, deleteCommit, redoCommit }) => (commit) => {\n    if (isNewCommit(commit)) {\n        return [\n            {\n                name: 'Save',\n                className: 'w3-button w3-light-grey e2e-save',\n                operate: () => saveCommit(commit)\n            }\n        ];\n    }\n\n    return [\n        {\n            name: 'Save',\n            className: 'w3-button w3-light-grey e2e-save',\n            operate: () => saveCommit(commit)\n        },\n        {\n            name: 'Redo',\n            className: 'w3-button w3-light-grey e2e-redo',\n            operate: () => redoCommit(commit)\n        },\n        {\n            name: copyCommitMessageName,\n            className: 'w3-button w3-light-grey e2e-copy-commit-message',\n            operate: () => copyCommitMessage(commit.message)\n        },\n        {\n            name: 'Delete',\n            className: 'w3-button w3-light-grey e2e-delete',\n            operate: () => deleteCommit(commit)\n        }\n    ];\n};\n\nexport { Operations, createOperations };\nexport { copyCommitMessageTargetId };","import { copyCommitMessageTargetId } from './Operations';\n\nfunction Message({ message, onChange }) {\n    return (\n        <>\n            <h4>Commit Message</h4>\n            <input id={copyCommitMessageTargetId} className=\"e2e-message\" type=\"text\" value={message} onChange={evt => onChange(evt.target.value)}></input>\n        </>\n    );\n}\n\nexport default Message;","function Note({ note, onChange }) {\n    return (\n        <>\n            <h4>Note</h4>\n            <textarea id=\"w3review\" className=\"e2e-note\" name=\"w3review\" rows=\"4\" cols=\"50\" value={note} onChange={evt => onChange(evt.target.value)}>\n            </textarea>\n        </>\n    );\n}\n\nexport default Note;","import './App.css';\nimport { useState, useEffect } from  'react';\nimport { SidebarContainer, ContentContainer } from './component/Layout';\nimport { GitHub, NewCommit, CakeServerLogo, Commits } from './component/sidebar';\nimport { Message, Note, Operations, createOperations } from './component/content';\n\nfunction App({ inject }) {\n\n    const { newCommit, isNewCommit, loadCommits, saveCommit, deleteCommit } = inject;\n\n    const [ commits, setCommits ] = useState([]);\n    const [ currentCommit, setCurrentCommit ] = useState(newCommit());\n\n    const loadData = () => { loadCommits().then(commits => setCommits(commits)) };\n\n    useEffect(() => {\n        loadCommits().then(commits => setCommits(commits));\n    }, []);\n\n    const operationFunctions = {\n        saveCommit: (toSaved) => { \n            saveCommit(toSaved).then(() => { loadData() });\n        }, \n        redoCommit: (toRedoed) => {\n            setCurrentCommit({ ...commits.filter(commit => commit.id === toRedoed.id)[0] });\n        },\n        copyCommitMessage: (message) => { \n            console.log('copy: ' + message);\n        },\n        deleteCommit: (toDeleted) => { \n            deleteCommit(toDeleted).then(() => { \n                loadData();\n                setCurrentCommit(newCommit());\n            });\n        }, \n    };\n\n    return (\n        <>\n            <SidebarContainer>\n                <CakeServerLogo />\n                <NewCommit onClick={() => {\n                    setCurrentCommit(newCommit())\n                }} />\n                <Commits commits={commits} onSelect={(selected) => {\n                    setCurrentCommit(selected)\n                }} />\n                <GitHub />\n            </SidebarContainer>\n\n            <ContentContainer>\n                <Message message={currentCommit.message} onChange={(message) => {\n                    setCurrentCommit({\n                        ...currentCommit,\n                        message\n                    })\n                }}/>\n                <Note note={currentCommit.note} onChange={(note) => {\n                    setCurrentCommit({\n                        ...currentCommit,\n                        note\n                    })\n                }}/>\n                <hr></hr>\n                <Operations operations={createOperations(isNewCommit(commits))(operationFunctions)(currentCommit)}/>\n            </ContentContainer>\n        </>\n    );\n}\n\nexport default App;\n","import { v4 as uuidv4 } from 'uuid';\n\nexport default uuidv4;","const getData = () => {\n    return JSON.parse(localStorage.getItem('cakeserver.commits') || '[]');\n};\n\nconst saveData = (commits) => {\n    localStorage.setItem('cakeserver.commits', JSON.stringify(commits));\n};\n\nclass LocalStorageDataSource {\n    \n    loadCommits() {\n        const commits = getData();\n        return new Promise((resolve, reject) => { resolve(commits) });\n    }\n\n    saveCommit(toSaved) { \n        let commits = getData();\n\n        const filtered = commits.filter(commit => commit.id === toSaved.id);\n        if (filtered.length === 0) {\n            commits = [ ...commits, toSaved ];\n        } else {\n            commits = [ ...commits.map(commit => commit.id === toSaved.id ? { id: commit.id, message: toSaved.message, note: toSaved.note } : commit) ];\n        }\n\n        saveData(commits);\n        return new Promise((resolve, reject) => { resolve() });\n    }\n\n    deleteCommit(toDeleted) {\n        let commits = getData();\n\n        commits = [ ...commits.filter(commitMessage => commitMessage.id !== toDeleted.id) ];\n\n        saveData(commits);\n        return new Promise((resolve, reject) => { resolve() });\n    }\n}\n\nexport default LocalStorageDataSource;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { newCommit, isNewCommit, InMemeryDataSource, LocalStorageDataSource } from './data';\n\nconst dataSource = new LocalStorageDataSource();\n\nconst inject = {\n  newCommit,\n  isNewCommit,\n  loadCommits: () => dataSource.loadCommits(),\n  saveCommit: (toSaved) => dataSource.saveCommit(toSaved),\n  deleteCommit: (toDeleted) => dataSource.deleteCommit(toDeleted),\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App inject={inject}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import uuidv4 from '../util/uuid';\n\nconst newCommit = () => ({ id: uuidv4(), message: '', note: '' });\n\nconst isNewCommit = (commits) => (toChecked) => {\n    const filtered = commits.filter(commit => commit.id === toChecked.id);\n    if (filtered.length === 0) {\n        return true;\n    }\n    return false;\n}\n\nexport { newCommit, isNewCommit };"],"sourceRoot":""}