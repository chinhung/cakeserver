{"version":3,"sources":["component/Layout.js","component/sidebar/GitHub.js","component/sidebar/NewCommit.js","component/sidebar/CakeServerLogo.js","component/sidebar/Commits.js","component/content/Message.js","component/content/Note.js","component/content/Operations.js","data/queryAndCommand.js","util/uuid.js","data/newCommit.js","data/LocalStorageDataSource.js","App.js","index.js"],"names":["sidebarWidth","SidebarContainer","props","className","style","zIndex","width","id","children","ContentContainer","marginLeft","GitHub","href","target","rel","NewCommit","onClick","CakeServerLogo","color","Commits","commits","onSelect","map","commit","message","note","Message","onChange","type","value","evt","Note","name","rows","cols","copyCommitMessageName","Operations","operations","useEffect","clipboard","ClipboardJS","on","e","console","info","action","text","trigger","clearSelection","error","operation","i","operate","createOperations","isNewCommit","saveCommit","copyCommitMessage","deleteCommit","redoCommit","loadCommits","dataSource","uuidv4","newCommit","toChecked","filter","length","getData","JSON","parse","localStorage","getItem","saveData","setItem","stringify","LocalStorageDataSource","Promise","resolve","reject","toSaved","filtered","toDeleted","commitMessage","App","useState","setCommits","currentCommit","setCurrentCommit","loadData","then","operationFunctions","toRedoed","log","selected","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57546e53.chunk.js","sourcesContent":["const sidebarWidth = '320px';\n\nfunction SidebarContainer(props) {\n    return (\n        <nav className=\"w3-sidebar w3-bar-block w3-collapse w3-white w3-animate-left w3-card\" style={{ zIndex: 3, width: sidebarWidth }} id=\"mySidebar\">\n            { props.children }\n        </nav>\n    );\n}\n\nfunction ContentContainer(props) {\n    return (\n        <div className=\"w3-main\" style={{ marginLeft: sidebarWidth }}>\n            <div id=\"Borge\" className=\"w3-container person\">\n            <br></br>\n                { props.children }\n            </div>\n        </div>\n    );\n}\n\nexport { SidebarContainer, ContentContainer };","function GitHub() {\n    return (\n        <a href=\"https://github.com/chinhung/cakeserver\" target=\"_blank\" rel=\"noreferrer\" className=\"w3-bar-item w3-button\"><i className=\"fa fa-github w3-margin-right\"></i>GitHub</a>\n    );\n}\n\nexport default GitHub;","function NewCommit({ onClick }) {\n    return (\n        <div className=\"w3-bar-item w3-button w3-dark-grey w3-button w3-hover-black w3-left-align\" onClick={onClick}>New Commit<i className=\"w3-padding fa fa-pencil\"></i></div>\n    );\n}\n\nexport default NewCommit;","function CakeServerLogo() {\n    return (\n        <div className=\"w3-bar-item w3-button w3-border-bottom w3-large\">\n            <h3>Cake Server</h3>\n            <h5 style={{ color: 'grey' }}>Splits your task into peices of cake!</h5>\n        </div>       \n    );\n}\n\nexport default CakeServerLogo;","function Commits({ commits, onSelect }) {\n    return (\n        <>\n            <div className=\"w3-bar-item w3-button\"><i className=\"fa fa-inbox w3-margin-right\"></i>Commits<i className=\"fa fa-caret-down w3-margin-left\"></i></div>\n            <div className=\"w3-animate-left\">\n\n                {commits.map(commit => (\n                    <div key={commit.id} className=\"w3-bar-item w3-button w3-border-bottom test w3-hover-light-grey\" onClick={() => onSelect({ ...commit })}>\n                        <div className=\"w3-container\">\n                            <span className=\"w3-opacity w3-large\">{commit.message}</span>\n                            <p>{commit.note}</p>\n                        </div>\n                    </div>\n                ))}\n            \n            </div>\n        </>\n    );\n}\n\nexport default Commits;","function Message({ message, onChange }) {\n    return (\n        <>\n            <h4>Commit Message</h4>\n            <input id=\"commitMessageText\" type=\"text\" value={message} onChange={evt => onChange(evt.target.value)}></input>\n        </>\n    );\n}\n\nexport default Message;","function Note({ note, onChange }) {\n    return (\n        <>\n            <h4>Note</h4>\n            <textarea id=\"w3review\" name=\"w3review\" rows=\"4\" cols=\"50\" value={note} onChange={evt => onChange(evt.target.value)}>\n            </textarea>\n        </>\n    );\n}\n\nexport default Note;","import ClipboardJS from 'clipboard';\nimport { useEffect } from 'react';\n\nconst copyCommitMessageName = 'Copy Commit Message';\n\nfunction Operations({ operations }) {\n\n    useEffect(() => {\n        const clipboard = new ClipboardJS('#copyCommitMessageBtn');\n\n        clipboard.on('success', function(e) {\n            console.info('Action:', e.action);\n            console.info('Text:', e.text);\n            console.info('Trigger:', e.trigger);\n        \n            e.clearSelection();\n        });\n        \n        clipboard.on('error', function(e) {\n            console.error('Action:', e.action);\n            console.error('Trigger:', e.trigger);\n        });\n        \n    }, []);\n\n    return (\n        operations.map((operation, i) => { \n            if (operation.name === copyCommitMessageName) {\n                return <button id=\"copyCommitMessageBtn\" data-clipboard-target=\"#commitMessageText\" key={i} className=\"w3-button w3-light-grey\" onClick={operation.operate}>{operation.name}</button>;\n            }\n\n            return <button key={i} className=\"w3-button w3-light-grey\" onClick={operation.operate}>{operation.name}</button>;\n        })\n    );\n}\n\nconst createOperations = (isNewCommit) => ({ saveCommit, copyCommitMessage, deleteCommit, redoCommit }) => (commit) => {\n    if (isNewCommit(commit)) {\n        return [\n            {\n                name: 'Save',\n                operate: () => saveCommit(commit)\n            }\n        ];\n    }\n\n    return [\n        {\n            name: 'Save',\n            operate: () => saveCommit(commit)\n        },\n        {\n            name: 'Redo',\n            operate: () => redoCommit(commit)\n        },\n        {\n            name: copyCommitMessageName,\n            operate: () => copyCommitMessage(commit.message)\n        },\n        {\n            name: 'Delete',\n            operate: () => deleteCommit(commit)\n        }\n    ];\n};\n\nexport { Operations, createOperations };","const loadCommits = (dataSource) => () => {\n    return dataSource.loadCommits();\n};\n\nconst saveCommit = (dataSource) => (toSaved) => { \n    return dataSource.saveCommit(toSaved);\n};\n\nconst deleteCommit = (dataSource) => (toDeleted) => {\n    return dataSource.deleteCommit(toDeleted);\n};\n\nexport { loadCommits, saveCommit, deleteCommit };","import { v4 as uuidv4 } from 'uuid';\n\nexport default uuidv4;","import uuidv4 from '../util/uuid';\n\nconst newCommit = () => ({ id: uuidv4(), message: '', note: '' });\n\nconst isNewCommit = (commits) => (toChecked) => {\n    const filtered = commits.filter(commit => commit.id === toChecked.id);\n    if (filtered.length === 0) {\n        return true;\n    }\n    return false;\n}\n\nexport { newCommit, isNewCommit };","const getData = () => {\n    return JSON.parse(localStorage.getItem('cakeserver.commits') || '[]');\n};\n\nconst saveData = (commits) => {\n    localStorage.setItem('cakeserver.commits', JSON.stringify(commits));\n};\n\nclass LocalStorageDataSource {\n    \n    loadCommits() {\n        const commits = getData();\n        return new Promise((resolve, reject) => { resolve(commits) });\n    }\n\n    saveCommit(toSaved) { \n        let commits = getData();\n\n        const filtered = commits.filter(commit => commit.id === toSaved.id);\n        if (filtered.length === 0) {\n            commits = [ ...commits, toSaved ];\n        } else {\n            commits = [ ...commits.map(commit => commit.id === toSaved.id ? { id: commit.id, message: toSaved.message, note: toSaved.note } : commit) ];\n        }\n\n        saveData(commits);\n        return new Promise((resolve, reject) => { resolve() });\n    }\n\n    deleteCommit(toDeleted) {\n        let commits = getData();\n\n        commits = [ ...commits.filter(commitMessage => commitMessage.id !== toDeleted.id) ];\n\n        saveData(commits);\n        return new Promise((resolve, reject) => { resolve() });\n    }\n}\n\nexport default LocalStorageDataSource;","import './App.css';\nimport { useState, useEffect } from  'react';\nimport { SidebarContainer, ContentContainer } from './component/Layout';\nimport { GitHub, NewCommit, CakeServerLogo, Commits } from './component/sidebar';\nimport { Message, Note, Operations, createOperations } from './component/content';\nimport { newCommit, isNewCommit, loadCommits, saveCommit, deleteCommit, InMemeryDataSource, LocalStorageDataSource } from './data';\n\nfunction App() {\n\n    const [ dataSource ] = useState(new LocalStorageDataSource());\n    const [ commits, setCommits ] = useState([]);\n    const [ currentCommit, setCurrentCommit ] = useState(newCommit());\n\n    const loadData = () => { loadCommits(dataSource)().then(commits => setCommits(commits)) };\n\n    useEffect(() => {\n        loadCommits(dataSource)().then(commits => setCommits(commits));\n    }, []);\n\n    const operationFunctions = {\n        saveCommit: (toSaved) => { \n            saveCommit(dataSource)(toSaved).then(() => { loadData() });\n        }, \n        redoCommit: (toRedoed) => {\n            setCurrentCommit({ ...commits.filter(commit => commit.id === toRedoed.id)[0] });\n        },\n        copyCommitMessage: (message) => { \n            console.log('copy: ' + message);\n        },\n        deleteCommit: (toDeleted) => { \n            deleteCommit(dataSource)(toDeleted).then(() => { \n                loadData();\n                setCurrentCommit(newCommit());\n            });\n        }, \n    };\n\n    return (\n        <>\n            <SidebarContainer>\n                <CakeServerLogo />\n                <NewCommit onClick={() => {\n                    setCurrentCommit(newCommit())\n                }} />\n                <Commits commits={commits} onSelect={(selected) => {\n                    setCurrentCommit(selected)\n                }} />\n                <GitHub />\n            </SidebarContainer>\n\n            <ContentContainer>\n                <Message message={currentCommit.message} onChange={(message) => {\n                    setCurrentCommit({\n                        ...currentCommit,\n                        message\n                    })\n                }}/>\n                <Note note={currentCommit.note} onChange={(note) => {\n                    setCurrentCommit({\n                        ...currentCommit,\n                        note\n                    })\n                }}/>\n                <hr></hr>\n                <Operations operations={createOperations(isNewCommit(commits))(operationFunctions)(currentCommit)}/>\n            </ContentContainer>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}